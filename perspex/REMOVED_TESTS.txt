


# TEST CASE: test_one_card_deck_complex
# (Complex refers to the card being an object of any kind.)
# Verify correct handling of a one card deck. It should be returned, identical to
# the original deck, regardless of the valid rounds_to_shuffle argument used.
# Verify correct handling of cards of an arbitrary data type, in this case,
# a dictionary of card attributes as a graphical card game might use.
# These tests are repeated for a few different rounds_to_shuffle values (1, 2, 5)
def test_one_card_deck_complex():
    print("\nRUNNING TEST: test_one_card_deck_complex")
    complex_card = dict(
        card_title = 'Ace of Spades',
        card_image_files = dict(
            large = 'ace_of_spades_400px.png',
            small = 'ace_of_spades_150px.png'
            )
        )
    comparable_complex_card = json.dumps(complex_card, sort_keys=True)
    one_card_deck = [ complex_card ]

    round_vals_to_try = [1, 2, 5]
    for rounds_to_shuffle in round_vals_to_try:
        shuffled_deck = xshuffle.shuffle(one_card_deck, rounds_to_shuffle)

        assert len(shuffled_deck) == 1, \
            f"one card deck shuffle returned a deck with {len(shuffled_deck)} " \
                f"cards in it. (rounds used: {rounds_to_shuffle})"

        card_in_shuffled_deck = shuffled_deck.pop()
        comparable_card = json.dumps(card_in_shuffled_deck, sort_keys=True)

        assert comparable_card == comparable_complex_card, \
            f"one card deck shuffle returned a complex card which had " \
                f"some difference in it. (rounds used: {rounds_to_shuffle})"

    print("\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ")


# ---------------------------------------------------------------------------- #

    #test_one_card_deck_complex()